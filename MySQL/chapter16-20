Chapter 16 	创建高级联结
1.	使用表别名 AS
a.	给列：返回到客户机
SELECT Concat(RTrim(vend_name), ‘(’, RTrim(vend_country), ‘)’) AS vend_title 
FROM vendors ORDER BY vend_name;
b.	给表：只在查询中使用，不返回到客户机
SELECT cust_name, cust_contact FROM customers AS c, orders AS o, orderitems AS oi
WHERE c.cust_id = o.cust_id AND oi.ordernum=o.ordernum AND prod_id = ‘TNT2’;
2.	使用不同类型的联结
a.	自联结：
SELECT p1.prod_id, p1.prod_name FROM products AS p1, products AS p2
WHERE p1.vend_id = p2.vend_id AND p2.vend_id = ‘DTNTR’; //使用同一个表两次，在p2中过滤数据返回p1
b.	自然联结：通过对一张表使用通配符，其他表的列使用明确的子集；排除多次出现，使每个列只返回一次
SELECT c*, o.order_num, o.order_date, oi.prod_id, oi.quantity, oi.item_price
FROM customers AS c, orders AS o, orderitems AS oi
WHERE c.cust_id = o.cust_id AND oi.order_num = o.order_num AND prod_id = ‘FB’;
c.	外部联结：包含在相关表中没有关联的行
LEFT OUTER JOIN 从左边表选所有行；RIGHT OUTER JOIN 从右边表选所有行
3.	使用带聚集函数的联结
a.	使用inner join与count(), group by分组
SELECT customers.cust_name, customers.cust_id, COUNT(orders.order_num) AS num_ord
FROM customers INNER JOIN orders ON customers.cust_id = orders.cust_id
GROUP BY customers.cust_id;
b.	与外联结：按客户分订单数，包含未下单的客户
SELECT customers.cust_name, customers.cust_id, COUNT(orders.order_num) AS num_ord
FROM customers LEFT OUTER JOIN orders ON customers.cust_id = orders.cust_id
GROUP BY customers.cust_id;
4.	使用联结和联结条件

Chapter 17 	组合查询
1.	组合查询：使用多条select 并将结果作为单个查询结果集返回
2.	创建组合查询
a.	使用union
SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price <=5 
UNION 
SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id IN (1001,1002)
b.	Union规则：≥2select两两之间；每个select有相同的列、表达式、聚集函数查询；列数据类型兼容
c.	包含或取消重复的行：union自动去除重复的行，union all返回所有匹配行
d.	对组合查询结果排序：只能用一条order by，在最后一条select之后

Chapter 18 	全文本搜索
1.	理解全文本搜索
MyISAM 支持，InnoDB 不支持
2.	使用全文本搜索
a.	启用全文本搜索支持：创建表时用FULLTEXT建立索引列；不要在导入数据时使用fulltext
b.	进行全文本搜索：match()指定被搜索的列，against()指定要用的表达式
SELECT note_text FROM productnotes WHERE Match(note_text) Against(‘rabbit’);
给match()的值要与fulltext()定义相同，指定多个要用正确次序列出
c.	使用查询扩展：Against(‘anvils’ WITH QUERY EXPANSION);
d.	布尔文本搜索：Againtst(‘heavy-rope*’ IN BOOLEAN MODE)
+ 包含，词必须存在；- 排除，词必须不出现；> 包含，且增加等级值
< 包含，且减少等级值，()词组为子表达式，~取消一个词的排序值
*词尾通配值， “ ”定义短语
e.	全文本搜索的使用说明：短词(字符≤3)被忽略且从索引排除；MySQL内建stopword表总被忽略；词出现在>50%行中被忽略(不用于布尔模式)；表中<3行，不返回结果；忽略单引号；无词分隔符不能返回恰当结果(中文、日文)；无邻近操作符

Chapter 19 	插入数据
1.	数据插入：INSERT
2.	插入完整的行
a.	INSERT INTO customers VALUES (...)
对每列提供一个值或null；对自动增量给null
b.	更安全的方法：给出列名，自动增量列可不出现，列名可以换次序
INSERT INTO customers (…) VALUES (…)
c.	省略列：定义允许null或定义给默认值；提高整体性能INSERT LOW_PRIORITY INTO
3.	插入多个行：多条insert into或当列名、次序相同时，value后多个(…),(…)
4.	插入检索出的数据
INSERT INTO customers(….) SELECT … FROM custnew;

Chapter 20 	更新和删除数据
1.	更新数据: update table_name SET row_name = ‘new value’ WHERE …；
不要省略where 以免更新表中所有行
可以使用子查询；可以通过设为null来删除值；
使用UPDATE IGNORE… 在发生错误时也继续更新
2.	删除数据：DELETE FROM table_name WHERE …;
不需要列名或通配符，删除整行；删除整列用update
不删除表本身
删除表中所有行：TRUNCATE TABLE更快
3.	更新和删除的指导原则：
不要忘记Where；保证每个表都有主键，where指定主键；先用select测试where的筛选正确；使用强制实施引用完整性的库：MySQL不允许删除与其他表关联的行
